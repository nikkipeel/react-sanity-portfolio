I recently decided to create a blog of my own where I could add technical posts, new projects, and list some of my favorite resources. After my initial sketches and creating wireframes in XD, I needed to decide on which language to build this blog with, what CMS (if any) I would use and where it would be deployed. I found this great tutorial on YouTube through Traversy Media:
Ôªø
This seemed like a great opportunity to get my blog up and running quickly with technologies I was already familiar with. I've built a few projects with React and Tailwind has been my CSS framework of choice for a while now. I found the tutorial very easy to follow along and well documented. I'd highly suggest visiting Sanity.io and their blog for more guides and project tutorials. 
1. Build the site using create-react-app
Open up a terminal and create your new site by running npx and 'create-react-app' in your project's folder followed by your new site's name (mine will be called 'portfolio' in this project). Please make sure you first have NPM (Node Package Manager) installed on your local machine first.
npx create-react-app portfolio
Once your initial files are created, run the following command to get into your new site:
cd portfolio
Finally, run npm start to view your site in your browser (this should run on localhost:3000)
2. Setting up Sanity
Now that the site is up and running with React, we need to connect it with Sanity. First, you need to install Sanity CLI globally:
npm i -g @sanity/cli
Next, we'll need to activate Sanity with our current project. I created a new folder in my site's directory to hold Sanity files named 'sanity-studio' and then ran the following command:
sanity init
You'll be asked to answer a list of questions related to your new Sanity project:
Create new project - Hit Enter
Your project name: You can name this whatever you'd like, I chose 'Portfolio' to match my folder's name
Use the default dataset configuration? - Type 'Y' and hit Enter (the default dataset configuration has a public dataset named 'production')
Project output path - This is the path where our Sanity project will live. It should read something like this: /sanity-studio/portfolio (your sanity folder and the name of this particular project). Hit Enter.
Select project template - For this project, we'll choose the 'Blog' schema. Using the arrow keys, navigate to 'Blog' so that it is selected and Hit Enter.
*Choosing 'Blog' should install the proper schemas needed for a blog project (schemas are content models created with Javascript that determine what sort of content we can upload via the Sanity studio (for example: Post, Author, Category, Project). If you'd like to learn to build these schemas manually, please visit the Sanity Docs or follow along with the video tutorial.
To start the Sanity studio (where you will add the blog/portfolio content), enter in to your sanity project by running cd sanity-studio
Start the development server by running sanity start
*make sure this is a separate terminal, you still want to view your site from localhost:3000
Once it's done building you can visit your new Sanity studio at localhost:3333 ü§©
This is what my project structure looked like once the Sanity configuration files and schemas were created (schema.js joins together the various schemas we've written (Post, BlockContent, Project, Author, Category):
portfolio ‚Üí sanity-studio ‚Üí schemas ‚Üí schema.js
blog-schema.png
blog-schema.png
This is what my Post schema looks like:
portfolio ‚Üí sanity-studio ‚Üí schemas ‚Üí post.js
post-schema.png
post-schema.png
3. Adding content to your Sanity studio
This next step involves adding actual content to our blog through the Sanity studio we just set up. As you can see, all of your content types are listed on the left-hand side of your studio. In order to add a new post to your blog, click the pencil icon in the top-left corner next to your project name and select your 'document type':
Ôªø
Screenshot (72).png
Screenshot (72).png
Screenshot (73).png
Screenshot (73).png
4. Connecting to our React app
Next, we need to connect our React app to the Sanity project. First, navigate into the main project's root folder and run:
npm install @sanity/client
Once that's finished, navigate to your project's src/ folder and create a new file name 'client.js' (this is where we'll import the package we just installed). Navigate into that file and insert the following code:
import sanityClient from "@sanity/client"; 
export default sanityClient({ 
projectId: "Your Project ID Here", // find this at manage.sanity.io or in your sanity.json 
dataset: "production", // this is from those question during 'sanity init' 
useCdn: true, 
});
From your Sanity dashboard, you'll also need to add 'localhost:3000' to our API settings. In your project's dashboard, navigate to 'Settings' and click on 'API'. Click where it says 'ADD NEW ORIGIN' and add 'http://localhost:3000'.n that same dashboard view, we are going to want to add ‚Äúlocalhost:3000‚Äù.
*You can also add localhost:3000 from the CLI by running sanity cors add http://locahost:3000 within your studio project
The React app and Sanity studio should now be connected üéâüëç
5. Building React components
Inside of your projects src/ folder, create a new folder named components/. This is where the global parts and pages of our project will be built. My components folder contains the following files:
Navbar.js and Footer.js - to be used globally 
Home.js - homepage
About.js - about page
Post.js - blog page, displays all posts
SinglePost.js - single post page
Project.js - projects page, displays all projects
Tools.js - resources page
6. Setting up routing with React-Router
To use React-Router in your project, make sure to install the required dependency first:
npm install --save react-router-dom
In your project's App.js, import all of the files you've just created in your project's components/ folder. You'll need to also install BrowserRouter, Route, and Switch from 'react-router-dom':
blog-appjs.png
blog-appjs.png
7. Displaying posts using GROQ
For each of your pages that will be using data from Sanity, be sure to import your Sanity client - client.js - along with 'useState' and 'useEffect' from 'react' (we'll be setting our state then fetching posts with useEffect and sanityClient). You should also import 'Link' from 'react-router-dom' for navigation to single posts. Here is what my final Post.js file looks like:
Ôªø
Screenshot (76).png
Screenshot (76).png
Screenshot (77).png
Screenshot (77).png
With Sanity, you can use either GROQ or GraphQL for your querying language. Since this was my first project with Sanity and the tutorial used GROQ, I decided to go with that for starting out. We're fetching the title, slug, description, featured image, and category for each post:
Screenshot (78).png
Screenshot (78).png
Next, you can map over the blog posts within the return statement to display post's data like so:
*Please disregard the additional class names I've added, I used TailwindCSS to style this project (we'll discuss that in the next section of this post)
Screenshot (79).png
Screenshot (79).png
Building the Single Post page
You'll want to install the following dependencies for your posts to display properly: 
npm install @sanity/block-content-to-react @sanity/image-url
block-content-to-react: this will render an array of block text from Sanity with React (visit docs)
image-url: this library helps with the image URL (visit docs)
SinglePost.js:
Ôªø
Screenshot (80).png
Screenshot (80).png
Ôªø
Screenshot (81).png
Screenshot (81).png
